server:
  port: 8083

spring:
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
  datasource:
    username: sa
#    url: jdbc:h2:mem:customdb;DB_CLOSE_ON_EXIT=FALSE
    url: jdbc:h2:file:./bmp;DB_CLOSE_ON_EXIT=FALSE
  h2:
    console:
      enabled: true

keycloak:
  server:
    keycloak-path: /auth
  adminUser:
    username: admin
    password: pass
  realmImportFile: baeldung-realm.json
#  hostname:
#    provider: "${keycloak.hostname.provider:}"
#    default:
#      frontendUrl: "${keycloak.frontendUrl:}"
#      adminUrl: "${keycloak.adminUrl:}"
#      forceBackendUrlToFrontendUrl: "${keycloak.hostname.default.forceBackendUrlToFrontendUrl:}"
  eventsStore:
    provider: "jpa"
    jpa:
      max-detail-length: "1000"
    map:
      storage-admin-events:
        provider: "concurrenthashmap"
      storage-auth-events:
        provider: "concurrenthashmap"
  deploymentState:
    provider: "jpa"
    map:
      resourcesVersionSeed: 1JZ379bzyOCFA
  globalLock:
    provider: "dblock"
  realm:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
  client:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
  clientScope:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
  group:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
  role:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
  authenticationSessions:
    provider: "infinispan"
    map:
      storage:
        provider: "concurrenthashmap"
    infinispan:
      authSessionsLimit: "300"
  userSessions:
    provider: "infinispan"
    map:
      storage:
        provider: "concurrenthashmap"
  loginFailure:
    provider: "infinispan"
    map:
      storage:
        provider: "concurrenthashmap"
  singleUseObject:
    provider: "infinispan"
    map:
      storage:
        provider: "concurrenthashmap"
  publicKeyStorage:
    provider: "infinispan"
    map:
      storage:
        provider: "concurrenthashmap"
  mapStorage:
#    provider: "${keycloak.mapStorage.provider:}"
    concurrenthashmap:
      dir: "target/map"
      keyType.single-use-objects: string
      keyType.realms: string
      keyType.authz-resource-servers: string
#    jpa:
#      url: "${keycloak.map.storage.connectionsJpa.url:}"
#      user: "${keycloak.map.storage.connectionsJpa.user:}"
#      password: "${keycloak.map.storage.connectionsJpa.password:}"
#      driver: org.postgresql.Driver
#      driverDialect: org.keycloak.models.map.storage.jpa.hibernate.dialect.JsonbPostgreSQL95Dialect
#      showSql: "false"
#    ldap-map-storage:
#      vendor: other
#      usernameLDAPAttribute: uid
#      rdnLDAPAttribute: uid
#      uuidLDAPAttribute: entryUUID
#      userObjectClasses: inetOrgPerson, organizationalPerson
#      connectionUrl: "${keycloak.map.storage.ldap.connectionUrl:}"
#      usersDn: ou=People,dc=keycloak,dc=org
#      bindDn: "${keycloak.map.storage.ldap.bindDn:}"
#      bindCredential: "${keycloak.map.storage.ldap.bindCredential:}"
#      roles.realm.dn: ou=RealmRoles,dc=keycloak,dc=org
#      roles.common.dn: dc=keycloak,dc=org
#      roles.client.dn: ou={0},dc=keycloak,dc=org
#      membership.ldap.attribute: member
#      role.name.ldap.attribute: cn
#      role.object.classes: groupOfNames
#      role.attributes: ou
#      mode: LDAP_ONLY
#      use.realm.roles.mapping: 'true'
#      connectionPooling: 'true'
#    file:
#      dir: "target/file"
  user:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
#  userFederatedStorage:
#    provider: "${keycloak.userFederatedStorage.provider:}"
#  userSessionPersister:
#    provider: "${keycloak.userSessionPersister.provider:}"
  authorizationPersister:
    provider: "jpa"
    map:
      storage:
        provider: "concurrenthashmap"
#  theme:
#    staticMaxAge: "${keycloak.theme.staticMaxAge:}"
#    cacheTemplates: "${keycloak.theme.cacheTemplates:}"
#    cacheThemes: "${keycloak.theme.cacheThemes:}"
#    folder:
#      dir: "${keycloak.theme.dir}"
  connectionsJpa:
    default:
      url: "jdbc:h2:file:./bmp;DB_CLOSE_ON_EXIT=FALSE"
      driver: "org.h2.Driver"
#      driverDialect: "${keycloak.connectionsJpa.driverDialect:}"
      user: "sa"
#      password: "${keycloak.connectionsJpa.password:}"
      showSql: "false"
#      formatSql: "${keycloak.connectionsJpa.formatSql:}"
#      globalStatsInterval: "${keycloak.connectionsJpa.globalStatsInterval:}"
  realmCache:
    default:
      enabled: "true"
  userCache:
    default:
      enabled: "true"
    mem:
      maxSize: 20000
  publicKeyCache:
    default:
      enabled: "true"
  authorizationCache:
    default:
      enabled: "true"
  connectionsInfinispan:
    default:
#      jgroupsUdpMcastAddr: "234.56.78.90"
#      nodeName: "${keycloak.connectionsInfinispan.nodeName,jboss.node.name:}"
#      siteName: "${keycloak.connectionsInfinispan.siteName,jboss.site.name:}"
#      clustered: "${keycloak.connectionsInfinispan.clustered:}"
#      async: "${keycloak.connectionsInfinispan.async:}"
#      sessionsOwners: "${keycloak.connectionsInfinispan.sessionsOwners:}"
#      l1Lifespan: "${keycloak.connectionsInfinispan.l1Lifespan:}"
#      remoteStoreEnabled: "${keycloak.connectionsInfinispan.remoteStoreEnabled:}"
#      remoteStoreHost: "${keycloak.connectionsInfinispan.remoteStoreServer:}"
#      remoteStorePort: "${keycloak.connectionsInfinispan.remoteStorePort:}"
#      hotrodProtocolVersion: "${keycloak.connectionsInfinispan.hotrodProtocolVersion}"
      embedded: "true"
  connectionsHotRod:
    default:
      embedded: "true"
      embeddedPort: "11444"
      enableSecurity: "false"
      port: "11444"
      host: "localhost"
      configureRemoteCaches: "false"
      username: "admin"
      password: "admin"
#      reindexCaches: "${keycloak.connectionsHotRod.reindexCaches:}"
  scripting: { }
#  jta-lookup:
#    provider: "${keycloak.jta.lookup.provider:}"
  login-protocol:
    openid-connect:
      legacy-logout-redirect-uri: "false"
#    saml:
#      knownProtocols:
#        - http=${auth.server.http.port}
#        - https=${auth.server.https.port}
  userProfile:
    provider: "declarative-user-profile"
    declarative-user-profile:
      read-only-attributes:
        - deniedFoo
        - deniedBar*
        - deniedSome/thing
        - deniedsome*thing
      admin-read-only-attributes:
        - deniedSomeAdmin
  x509cert-lookup:
#    provider: "${keycloak.x509cert.lookup.provider:}"
    haproxy:
      sslClientCert: x-ssl-client-cert
      sslCertChainPrefix: x-ssl-client-cert-chain
      certificateChainLength: 1
    apache:
      sslClientCert: x-ssl-client-cert
      sslCertChainPrefix: x-ssl-client-cert-chain
      certificateChainLength: 1
    nginx:
      sslClientCert: x-ssl-client-cert
      sslCertChainPrefix: x-ssl-client-cert-chain
      certificateChainLength: 1

#logging:
#  level:
#    root: debug